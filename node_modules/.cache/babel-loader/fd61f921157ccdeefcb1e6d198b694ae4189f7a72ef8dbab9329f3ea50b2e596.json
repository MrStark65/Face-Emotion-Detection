{"ast":null,"code":"import React,{useRef,useState,useCallback}from'react';import{motion}from'framer-motion';import{toast,ToastContainer}from'react-toastify';import'react-toastify/dist/ReactToastify.css';import WebcamCapture from'./WebcamCapture';import EmotionDisplay from'./EmotionDisplay';import LoadingSpinner from'./LoadingSpinner';import{analyzeFace}from'../utils/faceApiHelper';import'../styles/components/EmotionDetector.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const EmotionDetector=()=>{const webcamRef=useRef(null);const[emotions,setEmotions]=useState(null);const[isProcessing,setIsProcessing]=useState(false);const[error,setError]=useState(null);const[captureHistory,setCaptureHistory]=useState([]);const captureAndAnalyze=useCallback(async()=>{if(isProcessing)return;try{setIsProcessing(true);setError(null);const imageSrc=webcamRef.current.getScreenshot();const result=await analyzeFace(imageSrc);if(result.faces&&result.faces.length>0){const newEmotions=result.faces[0].attributes.emotion;setEmotions(newEmotions);setCaptureHistory(prev=>[...prev,{timestamp:new Date(),emotions:newEmotions}]);toast.success('Emotion detected successfully!');}else{setError('No face detected. Please try again.');toast.error('No face detected. Please try again.');}}catch(err){setError('Error processing image. Please try again.');toast.error('Error processing image. Please try again.');console.error(err);}finally{setIsProcessing(false);}},[isProcessing]);const clearHistory=()=>{setCaptureHistory([]);toast.info('History cleared');};return/*#__PURE__*/_jsxs(motion.div,{className:\"emotion-detector\",initial:{opacity:0,y:20},animate:{opacity:1,y:0},transition:{duration:0.5},children:[/*#__PURE__*/_jsx(WebcamCapture,{webcamRef:webcamRef}),/*#__PURE__*/_jsxs(\"div\",{className:\"controls\",children:[/*#__PURE__*/_jsx(motion.button,{className:\"capture-button\",onClick:captureAndAnalyze,disabled:isProcessing,whileHover:{scale:1.05},whileTap:{scale:0.95},children:isProcessing?'Processing...':'Detect Emotion'}),captureHistory.length>0&&/*#__PURE__*/_jsx(motion.button,{className:\"clear-button\",onClick:clearHistory,whileHover:{scale:1.05},whileTap:{scale:0.95},children:\"Clear History\"})]}),isProcessing&&/*#__PURE__*/_jsx(LoadingSpinner,{}),/*#__PURE__*/_jsx(EmotionDisplay,{emotions:emotions,error:error,history:captureHistory}),/*#__PURE__*/_jsx(ToastContainer,{position:\"bottom-right\",autoClose:3000,hideProgressBar:false,newestOnTop:true,closeOnClick:true,rtl:false,pauseOnFocusLoss:true,draggable:true,pauseOnHover:true})]});};export default EmotionDetector;","map":{"version":3,"names":["React","useRef","useState","useCallback","motion","toast","ToastContainer","WebcamCapture","EmotionDisplay","LoadingSpinner","analyzeFace","jsx","_jsx","jsxs","_jsxs","EmotionDetector","webcamRef","emotions","setEmotions","isProcessing","setIsProcessing","error","setError","captureHistory","setCaptureHistory","captureAndAnalyze","imageSrc","current","getScreenshot","result","faces","length","newEmotions","attributes","emotion","prev","timestamp","Date","success","err","console","clearHistory","info","div","className","initial","opacity","y","animate","transition","duration","children","button","onClick","disabled","whileHover","scale","whileTap","history","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover"],"sources":["D:/emotion-detection/face-emotion-detection/src/components/EmotionDetector.js"],"sourcesContent":["import React, { useRef, useState, useCallback } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport WebcamCapture from './WebcamCapture';\r\nimport EmotionDisplay from './EmotionDisplay';\r\nimport LoadingSpinner from './LoadingSpinner';\r\nimport { analyzeFace } from '../utils/faceApiHelper';\r\nimport '../styles/components/EmotionDetector.css';\r\n\r\nconst EmotionDetector = () => {\r\n  const webcamRef = useRef(null);\r\n  const [emotions, setEmotions] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [captureHistory, setCaptureHistory] = useState([]);\r\n\r\n  const captureAndAnalyze = useCallback(async () => {\r\n    if (isProcessing) return;\r\n\r\n    try {\r\n      setIsProcessing(true);\r\n      setError(null);\r\n\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      const result = await analyzeFace(imageSrc);\r\n\r\n      if (result.faces && result.faces.length > 0) {\r\n        const newEmotions = result.faces[0].attributes.emotion;\r\n        setEmotions(newEmotions);\r\n        setCaptureHistory(prev => [...prev, {\r\n          timestamp: new Date(),\r\n          emotions: newEmotions\r\n        }]);\r\n        toast.success('Emotion detected successfully!');\r\n      } else {\r\n        setError('No face detected. Please try again.');\r\n        toast.error('No face detected. Please try again.');\r\n      }\r\n    } catch (err) {\r\n      setError('Error processing image. Please try again.');\r\n      toast.error('Error processing image. Please try again.');\r\n      console.error(err);\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  }, [isProcessing]);\r\n\r\n  const clearHistory = () => {\r\n    setCaptureHistory([]);\r\n    toast.info('History cleared');\r\n  };\r\n\r\n  return (\r\n    <motion.div \r\n      className=\"emotion-detector\"\r\n      initial={{ opacity: 0, y: 20 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      <WebcamCapture webcamRef={webcamRef} />\r\n      \r\n      <div className=\"controls\">\r\n        <motion.button \r\n          className=\"capture-button\"\r\n          onClick={captureAndAnalyze}\r\n          disabled={isProcessing}\r\n          whileHover={{ scale: 1.05 }}\r\n          whileTap={{ scale: 0.95 }}\r\n        >\r\n          {isProcessing ? 'Processing...' : 'Detect Emotion'}\r\n        </motion.button>\r\n\r\n        {captureHistory.length > 0 && (\r\n          <motion.button \r\n            className=\"clear-button\"\r\n            onClick={clearHistory}\r\n            whileHover={{ scale: 1.05 }}\r\n            whileTap={{ scale: 0.95 }}\r\n          >\r\n            Clear History\r\n          </motion.button>\r\n        )}\r\n      </div>\r\n\r\n      {isProcessing && <LoadingSpinner />}\r\n      \r\n      <EmotionDisplay \r\n        emotions={emotions} \r\n        error={error} \r\n        history={captureHistory}\r\n      />\r\n\r\n      <ToastContainer\r\n        position=\"bottom-right\"\r\n        autoClose={3000}\r\n        hideProgressBar={false}\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default EmotionDetector;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}